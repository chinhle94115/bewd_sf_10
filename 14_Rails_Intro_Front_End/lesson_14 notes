cd my_music_app/
bundle
rails db:migrate


**look at app/models/artist.rb and song.rb**

Resources     Controller      View            Model

Artist        index           index.html.erb
              new-create      new.html.erb
              edit-update     edit.html.erb

Song

Review

in Gemfile, it should look like this...
source 'https://rubygems.org'


# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
gem 'rails', '4.2.3'
gem 'sqlite3'

#Front End Tools
gem 'sass-rails', '~> 5.0'
gem 'uglifier', '>= 1.3.0'
gem 'coffee-rails', '~> 4.1.0'
gem 'jquery-rails'
gem 'bootstrap-sass', '~> 3.3.5'
gem 'simple_form'


#Other
gem 'turbolinks'
gem 'jbuilder', '~> 2.0'
gem 'sdoc', '~> 0.4.0', group: :doc

group :development, :test do  #grouping says make it only available in these environments
  gem 'byebug'
  gem 'pry-rails'
  gem 'pry-byebug'
  gem 'binding_of_caller'
  gem 'better_errors'
  gem 'annotate'
  gem 'spring'
end

after puttin in the new gem files - bootstrap-sass, simple_form,
bundle
bundle update
rails generate controller static_pages home about test #test is helpful
go to /app/assets/javascripts/application.js
add bootstrap-sprockets like this in between these
//= require jquery_ujs
//= require bootstrap-sprockets
//= require turbolinks
go to /app/assets/stylesheets & create a new file
custom.css.scss
and in it...
@import "bootstrap";
@import "bootstrap-sprockets";

in config/routes.rb
Rails.application.routes.draw do
  resources :artist
  resources :song

  get 'about', to: "static_pages#about", as: 'about'
  get 'test', to: "static_pages#test", as: 'test'
  get 'home', to: "static_pages#home", as: 'home'

  root 'static_pages#home'

  #we are doing a lot of stuff that we did several classes ago

  in home.html.erb
  <h1>Welcome to Tight Music!</h1>
  <p><%=link_to "Check out our music", test_path, class: "btn btn-lg btn-warning" %></p>

in application.html.erb
<!DOCTYPE html>
<html>
<head>
  <title>Tight Music</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
<div class=container-fluid>
  <%= yield %>
</div>
</body>
</html>

rails generate simple_form:install --bootstrap
exit and restart rails server

search web for free bootstrap themes
makes things look pretty

now we need a new Artist controller
 - generates routes and controllers
 - needs to have plural form, but it doesn't matter if capitalize or not
 - will also create view layer
 - this creates methods in controller
 - creates erb (embed ruby) files

 rails generate controller artists new index show edit

 RESTful controller means - create a new, read individual and all, update, destroy
  - means has CRUD

  in config/routes.rb
  delete extra stuff, should only be

  resources :artists
  resources :songs

  get 'about', to: "static_pages#about", as: 'about'
  get 'test', to: "static_pages#test", as: 'test'
  get 'home', to: "static_pages#home", as: 'home'

  root 'static_pages#home'

  in controllers/artists_controller.rb
  def index
    @artists = Artist.all
  end
  so now this take us to the view of artist; views/artists/index

  <div class="col-xs-12">

    <h1 style ="color:#cc3333;">Artists</h1>
    <%=@artists.inspect %>
  </div>

and look at "grid system" in http: getbootstrap.com/css

change index again
<div class="col-xs-12">
  <div class="table-responsive">
    <h1 style="#color#6666666;"> Our Cool Artists </h1>
    <table class="table table-hover">
      <!-- This is a table row with headers -->
      <tr class="small">
        <th> Artist Image </th>
        <th> Name </th>
        <th> Bio </th>
        <th> Genre </th>
        <th> Actions </th>
      </tr>

      <%@artists.each do |artist| %>
      <tr>
        <td class="col-md-2"> <%= image_tag(artist.image_url, class: 'img-thumbnail img-responsive') %> </td>
        <td> <%=artist.image_url %> </td>
        <td> <%=artist.name %> </td>
        <td> <%=artist.description %> </td>
        <td> Coming Soon </td>
      </tr>
      <% end %>
    </table>
  </div>

</div>


can change buttons in getbootstrap.com/css and look for buttons
<div class="col-xs-12">
  <div class="table-responsive">
    <h1 style="#color#6666666;"> Our Cool Artists </h1>
    <table class="table table-hover">
      <!-- This is a table row with headers -->
      <tr class="small">
        <th> Artist Image </th>
        <th> Name </th>
        <th> Bio </th>
        <th> Genre </th>
        <th> Actions </th>
      </tr>

      <%@artists.each do |artist| %>
      <tr>
        <td class="col-md-2"> <%= image_tag(artist.image_url, class: 'img-thumbnail img-responsive') %> </td>

        <td> <%=artist.name %> </td>
        <td> <%=artist.description %> </td>
        <td> <%=link_to 'Show', artist_path(artist), class: 'btn btn-default btn-xs' %>
             <%= link_to 'Edit', edit_artist_path(artist), class: 'btn btn-success btn-xs' %>
             <%= link_to 'Delete', artist, method: :delete, data: {confirm: "Are you sure?"}, class: 'btn btn-xs btn-danger' %>
        </td>
      </tr>
      <% end %>
    </table>
  </div>
<div class="well">
      <%= link_to "Add New Artist", new_artist_path, class: 'btn btn-default btn-lg' %>

</div>

you can look up what each of these things do, ie the javascripts

now you need to edit the controller
class ArtistsController < ApplicationController
  def new
    @artist = Artist.new
  end

  def index
    @artists = Artist.all
  end

  def show
    @artist = get_artist
  end

  def create
    @artist = Artist.new(artist_params)
    if @artist.save
      redirect_to artists_path
    end
  end

  def edit
    @artist = get_artist
  end

  def update
    @artist = get_artist
    if @artist.update(artist_params)
      redirect_to artists_path(@artist)
    else
      render 'edit'
    end
  end

  def destroy
    @artist = Artist.find(params[:id])
    @artist.destroy

    redirect_to artists_path
  end


  private

  def artist_params
    params.require(:artist).permit(:name, :image_url, :description)
  end

  def get_artist
    Artist.find(params[:id])
  end
end

and some of the view pages
new.html.erb

<div class="panel panel-default">
  <div class="panel-heading">
    <h1> New Artist </h1>
  </div>


<%= simple_form_for @artist do |f| %>
  <%= f.input :name, label: false, input_html: {placeholder: "Name"} %>
  <%= f.input :description, label: false, as: :text, input_html: {placeholder: "Artist Bio"}%>
  <%= f.input :image_url, label: false, input_html: {placeholder: "Image"}%>
  <%= f.submit "Submit".html_safe, class: "btn btn-lg btn-danger" %>

<% end %>

edit.html.erb

<div class="panel panel-default">
  <div class="panel-heading">
    <h1> Edit Artist </h1>
  </div>


<%= simple_form_for @artist do |f| %>
  <%= f.input :name, label: false, input_html: {placeholder: "Name"} %>
  <%= f.input :description, label: false, as: :text, input_html: {placeholder: "Artist Bio"}%>
  <%= f.input :image_url, label: false, input_html: {placeholder: "Image"}%>
  <%= f.submit "Edit".html_safe, class: "btn btn-lg btn-danger" %>

<% end %>

but you can also make it share code with new because it's similar
so use a _form
